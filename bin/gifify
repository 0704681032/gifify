#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var program = require('commander');
var Promise = require('promise');
var whereis = require('whereis');
var exec = require('child_process').exec;
var util = require('util');
var colors = require('colors');

var gifify = require('../');

var options =
  program
    .version(require('../package.json').version)
    .usage('[options] [file]')
    .option('--colors <n>', 'Number of colors, up to 255, defaults to 80', parseFloat, 80)
    .option('--compress <n>', 'Compression (quality) level, from 0 (no compression) to 100, defaults to 40', 40)
    .option('--from <position>', 'Start position, hh:mm:ss or seconds, defaults to 0')
    .option('--fps <n>', 'Frames Per Second, defaults to 10', parseFloat, 10)
    .option('-o, --output <file>', 'Output file, defaults to stdout')
    .option('--resize <W:H>', 'Resize output, use -1 when specifying only width or height. `350:100`, `400:-1`, `-1:200`')
    .option('--speed <n>', 'Movie speed, defaults to 1', parseFloat, 1)
    .option('--subtitles <filepath>', 'Subtitle filepath to burn to the GIF')
    .option('--text <string>', 'Add some text at the bottom of the movie')
    .option('--to <position>', 'End position, hh:mm:ss or seconds, defaults to end of movie'
    )
    .parse(process.argv);

// we can only deal with one gif at a time
if (options.args.length > 1) {
  program.help();
}

// show help if user only typed "gifify" without piping to it or specifying an input file
if (process.stdin.isTTY && options.args.length === 0) {
  program.help();
}

// main program logic
checkRequirements()
  .then(encode)
  .catch(abort);

function abort(err) {
  console.error(err);
  process.exit(1);
}

function encode() {
  var outputStream;
  if (options.output !== undefined) {
    outputStream = fs.createWriteStream(path.resolve(process.cwd(), options.output));
  } else {
    outputStream = process.stdout;
  }

  var input;

  if (options.args[0] === undefined) {
    // we got piped!
    input = process.stdin;
  } else {
    input = path.resolve(process.cwd(), options.args[0]);
    if (!fs.existsSync(input)) {
      abort(new Error('Could not find: ' + input));
      return;
    }
  }

  var gifStream = gifify(input, options);
  gifStream.pipe(outputStream);
  gifStream.on('error', abort.bind(null));
  outputStream.on('error', abort.bind(null));
}

function notInstalledMessage(command) {
  return colors.red(util.format("\tCould not find %s. Is it installed?", command));
}

function missingDependency(command, dependencies) {
  return colors.red(util.format("\t%s needs %s", command, dependencies.join(", ")));
}

// This will check both if the required applications are installed, and if they
// are installed with the correct dependencies. For example, to make subtitles
// work, ffmpeg needs to be compiled with `enable-libass`.
function checkRequirements() {
  var required = {
    'ffmpegx': { 'args' : '-version', 'needs': ['enable-libass', 'enable-libfontconfig'] },
    'convert': { 'args': '--version', 'needs': ['fontconfig'] },
    'gifsicle': { 'args': '-h', 'needs': ['lossy'] }
  }
  var promises = Object.keys(required).map(function (key) {
    var options = required[key];
    return new Promise(function find(resolve, reject) {
      exec([key, options['args']].join(' '), function(error, stdout, stderr) {
        if (error) return reject(notInstalledMessage(key));

        var ok = (options['needs'] || []).every(function(req) {
          return new RegExp(req, 'i').test(stdout);
        });
        if (ok) {
          return resolve();
        } else {
          return reject(missingDependency(key, options['needs']));
        }
      });
    });
  });

  return Promise.all(promises);
}
